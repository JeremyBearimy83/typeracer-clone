[{"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/index.tsx":"1","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/App.tsx":"2","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/context/GameContext.tsx":"3","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/context/AuthContext.tsx":"4","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/utils/socket.ts":"5","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Auth.tsx":"6","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Play.tsx":"7","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Home.tsx":"8","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Game.tsx":"9","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Room.tsx":"10","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Header.tsx":"11","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/hooks/useInputState.ts":"12","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Divify.tsx":"13","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Track.tsx":"14","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/hooks/useTimer.ts":"15"},{"size":922,"mtime":1611153828964,"results":"16","hashOfConfig":"17"},{"size":1115,"mtime":1610523408531,"results":"18","hashOfConfig":"17"},{"size":2038,"mtime":1611154086599,"results":"19","hashOfConfig":"17"},{"size":974,"mtime":1610523408531,"results":"20","hashOfConfig":"17"},{"size":113,"mtime":1610523408535,"results":"21","hashOfConfig":"17"},{"size":7678,"mtime":1611153812277,"results":"22","hashOfConfig":"17"},{"size":1589,"mtime":1611153704895,"results":"23","hashOfConfig":"17"},{"size":564,"mtime":1610523221843,"results":"24","hashOfConfig":"17"},{"size":5728,"mtime":1611153704895,"results":"25","hashOfConfig":"17"},{"size":1959,"mtime":1611153704895,"results":"26","hashOfConfig":"17"},{"size":1102,"mtime":1610523221843,"results":"27","hashOfConfig":"17"},{"size":432,"mtime":1610523221843,"results":"28","hashOfConfig":"17"},{"size":798,"mtime":1610523408531,"results":"29","hashOfConfig":"17"},{"size":522,"mtime":1611153704895,"results":"30","hashOfConfig":"17"},{"size":404,"mtime":1611153704895,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j9p1b",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/index.tsx",[],"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/App.tsx",[],["72","73"],"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/context/GameContext.tsx",[],"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/context/AuthContext.tsx",["74"],"import React, { ReactElement, useContext, useState } from \"react\";\nimport { User, Nullable } from \"../utils/types\";\n\ninterface Props {\n  children: ReactElement;\n}\n\ninterface Value {\n  currentUser: Nullable<User>;\n  register: (email: string, password: string) => Promise<void>;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = React.createContext<Nullable<Value>>(null);\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport default function AuthProvider({ children }: Props): ReactElement {\n  const [currentUser, setCurrentUser] = useState<Nullable<User>>(null);\n\n  const register = async (email: string, password: string) => {};\n\n  const login = async (email: string, password: string) => {};\n\n  const logout = async () => {};\n\n  const value = {\n    currentUser,\n    register,\n    login,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/utils/socket.ts",[],"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Auth.tsx",["75","76","77","78","79","80","81","82"],"import React, { ReactElement, useState, FormEvent } from \"react\";\n\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nconst validateEmail = (email: string) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport default function Auth({}: Props): ReactElement {\n  const [login, setLogin] = useState(true);\n\n  const switchPage = () => {\n    setLogin((prev) => !prev);\n  };\n\n  return (\n    <div className=\"auth\">\n      <main>\n        {login ? (\n          <SignIn switchPage={switchPage} />\n        ) : (\n          <Register switchPage={switchPage} />\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction SignIn({ switchPage }: { switchPage: () => void }): ReactElement {\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const [email, setEmail, resetEmail] = useInputState();\n  const [pass, setPass, resetPass] = useInputState();\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n    else if (!validateEmail(email)) errors.push(\"Invalid Email ID\");\n    if (!pass) errors.push(\"Password is Required\");\n\n    if (errors.length === 0) {\n    } else {\n      resetEmail();\n      resetPass();\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h1>Sign In</h1>\n      <form onSubmit={handleSubmit}>\n        {errors.map((err) => {\n          return <div className=\"error\">{err}</div>;\n        })}\n        <div className=\"input\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={email}\n            onChange={setEmail}\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Johndoe@gmail.com\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"pass\">Password</label>\n          <input\n            value={pass}\n            onChange={setPass}\n            id=\"pass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n\n        <div className=\"outh outh--google\">\n          <i className=\"fab fa-google\"></i>\n          Continue with Google\n        </div>\n        <div className=\"outh outh--discord\">\n          <i className=\"fab fa-discord\"></i>\n          Continue with Discord\n        </div>\n        <button>Submit</button>\n      </form>\n      <span>\n        Don't have an account? <span onClick={switchPage}>Register</span>{\" \"}\n      </span>\n    </React.Fragment>\n  );\n}\n\nfunction Register({ switchPage }: { switchPage: () => void }): ReactElement {\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const [username, setUsername, resetUsername] = useInputState();\n  const [email, setEmail, resetEmail] = useInputState();\n  const [pass, setPass, resetPass] = useInputState();\n  const [confirmPass, setConfirmPass, resetConfirmPass] = useInputState();\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const errors: string[] = [];\n    if (!username) errors.push(\"Username is Required\");\n    if (!email) errors.push(\"Email is Required\");\n    else if (!validateEmail(email)) errors.push(\"Invalid Email ID\");\n    if (!pass) errors.push(\"Password is Required\");\n    else if (pass !== confirmPass) errors.push(\"Passwords do not match\");\n\n    if (errors.length === 0) {\n    } else {\n      resetEmail();\n      resetPass();\n      resetConfirmPass();\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h1>Register</h1>\n      <form onSubmit={handleSubmit}>\n        {errors.map((err) => {\n          return <div className=\"error\">{err}</div>;\n        })}\n        <div className=\"input\">\n          <label htmlFor=\"username\">Username</label>\n          <input\n            value={username}\n            onChange={setUsername}\n            id=\"username\"\n            type=\"text\"\n            placeholder=\"JohnDoe\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={email}\n            onChange={setEmail}\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Johndoe@gmail.com\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"pass\">Password</label>\n          <input\n            value={pass}\n            onChange={setPass}\n            id=\"pass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"cpass\">Confirm Password</label>\n          <input\n            value={confirmPass}\n            onChange={setConfirmPass}\n            id=\"cpass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n\n        <button>Submit</button>\n      </form>\n      <span>\n        Already have an account? <span onClick={switchPage}>Sign In</span>{\" \"}\n      </span>\n    </React.Fragment>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Play.tsx",["83"],"import React, { ReactElement, useRef, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useGame } from \"../../context/GameContext\";\n\nexport default function Play({ match }: any): ReactElement {\n  const history = useHistory();\n\n  const game = useGame();\n\n  const [error, setError] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  game?.onUpdate((room, event) => {\n    if (event === \"room-created\" || event === \"room-joined\")\n      history.push(`/room/${room._id}`);\n  });\n\n  const handleCreate = () => {\n    game?.createRoom();\n  };\n\n  const handleJoin = () => {\n    const roomID = inputRef.current?.value;\n\n    if (!roomID) return;\n\n    //VERIFY IF ROOM EXISTS\n\n    const exists = true;\n\n    if (!exists) {\n      setError(true);\n      return;\n    }\n\n    game?.joinRoom(roomID);\n  };\n\n  return (\n    <div className=\"play\">\n      <section>\n        <h1>Create a Room</h1>\n        <button onClick={handleCreate}>Create</button>\n      </section>\n      <section>\n        <h1>Join a Room</h1>\n        {error && <span className=\"error\">Invalid ID</span>}\n        <input ref={inputRef} type=\"text\" placeholder=\"Room ID\" />\n        <button onClick={handleJoin}>Join</button>\n      </section>\n    </div>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Home.tsx",["84","85"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport typing from \"../../assets/typing.png\";\n\ninterface Props {}\n\nexport default function Home({}: Props): ReactElement {\n  return (\n    <div className=\"home\">\n      <aside>\n        <h1>TypeRacer</h1>\n        <p>\n          Take your typing skills to the next level, one keystroke at a time\n        </p>\n        <Link to=\"/play\">\n          <button>Start Typing</button>\n        </Link>\n      </aside>\n      <aside>\n        <img src={typing} />\n      </aside>\n    </div>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Game.tsx",["86","87","88","89","90","91","92"],"import React, { ReactElement, useState, useEffect, useRef } from \"react\";\n\nimport Divify from \"../utils/Divify\";\nimport Track from \"../utils/Track\";\n\nimport { Letter } from \"../../utils/types\";\nimport { useLocation } from \"react-router-dom\";\nimport { useGame } from \"../../context/GameContext\";\n\n// const textString: string =\n//   \"Synthetic emotions in the form of pills, psychological warfare in the form of advertising, mind-altering chemicals in the form of food, brainwashing seminars in the form of media, controlled isolated bubbles in the form of social networks.\";\n\n// const textString: string = \"Please work :)\";\n\nexport default function Game(): ReactElement {\n  //FOR COUNDOWN\n  const [started, setStarted] = useState(false);\n\n  // GETS PARAGRAPH FROM ROOM\n  const {\n    state: { textString },\n  }: any = useLocation();\n\n  const game = useGame();\n\n  // const textString = game?.room?.paragraph;\n\n  //STORES AN ARRAY OF WORDS\n  const wordsArr: string[] = textString.split(\" \");\n\n  //STORES ARRAY OF LETTER OBJECTS\n  const textArr: Letter[] = textString\n    .split(\"\")\n    .map((val: string) => ({ value: val, color: \"grey\" }));\n\n  const [text, setText] = useState<Letter[]>(textArr);\n  //THE INDEX I AM  CURRENTLY ON IN THE LETTER ARRAY\n  //const [letterCount, setLetterCount] = useState<number>(1);\n\n  //THE INDEX I AM CURRENTLY ON IN THE WORD ARRAY\n  const [wordCount, setWordCount] = useState<number>(0);\n\n  const [wordStartIndex, setWordStartIndex] = useState<number>(0);\n\n  //CURRENT WORD BEING TYPED IN THE INPUT\n  const [currentWord, setCurrentWord] = useState(\"\");\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"HANDLE IN PUT CHANGE IN CALLED\");\n    setCurrentWord(event.target.value);\n  };\n\n  useEffect(() => {\n    setText((prevText) => {\n      console.log({ prevText });\n      // const n: number = wordStartIndex + wordsArr[wordCount].length;\n      // console.log({ n });\n      const newText = prevText.map((l: Letter, i: number) => {\n        if (i >= wordStartIndex && i < wordStartIndex + currentWord.length) {\n          const subString: string = wordsArr[wordCount].substr(\n            0,\n            i - wordStartIndex + 1\n          );\n          return {\n            ...l,\n            color:\n              subString === currentWord.substr(0, i - wordStartIndex + 1)\n                ? \"green\"\n                : \"red\",\n          };\n        } else if (i >= wordStartIndex) return { ...l, color: \"grey\" };\n        return l;\n      });\n      return newText;\n    });\n  }, [currentWord]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    console.log(event.key);\n    if (event.key == \" \") {\n      if (currentWord === wordsArr[wordCount]) {\n        setCurrentWord(\"\");\n        setWordCount(wordCount + 1);\n        setWordStartIndex((prev) => prev + currentWord.length + 1);\n        event.preventDefault();\n      } else return;\n    }\n  };\n\n  useEffect(() => {\n    if (wordStartIndex > 0) {\n      setText((prevText) => {\n        const newText = Object.assign([], prevText, {\n          [wordStartIndex - 1]: {\n            ...prevText[wordStartIndex - 1],\n            color: \"green\",\n          },\n        });\n        return newText;\n      });\n    }\n  }, [wordStartIndex]);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, [started]);\n\n  //console.log({ text });\n  return started ? (\n    <div className=\"game\">\n      <Track />\n      <Track />\n      <Track />\n      <Track />\n      <Divify textArr={text} />\n      <div className=\"input-container\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={currentWord}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n        />\n      </div>\n    </div>\n  ) : (\n    <Countdown start={() => setStarted(true)} />\n  );\n}\n\nfunction Countdown({ start }: { start: () => void }): ReactElement {\n  const [current, setCurrent] = useState(0);\n\n  useEffect(() => {\n    if (current === 3) start();\n    setTimeout(() => {\n      setCurrent((prev) => prev + 1);\n    }, 800);\n  }, [current]);\n\n  const hints = [\"Get Ready\", \"Hands on board\", \"Go!\"];\n\n  return (\n    <div className=\"countdown\">\n      <section>\n        <div style={{ opacity: current == 0 ? 1 : 0.4 }} className=\"red\"></div>\n        <div\n          style={{ opacity: current == 1 ? 1 : 0.4 }}\n          className=\"orange\"\n        ></div>\n        <div\n          style={{ opacity: current == 2 ? 1 : 0.4 }}\n          className=\"green\"\n        ></div>\n      </section>\n      <section>{hints[current]}</section>\n    </div>\n  );\n}\n\n//ACHA SO WHAT'S THE NEW PLAN\n//THE NEW PLAN IS WHEN THE CURRENT WORD CHANGES\n//I SHOULD SET ALL THE CURRENT CHARACTERS TO GREEN OR RED\n\n//FEW ISSUES TO BE RESOLVED RIGHT NOW:\n//TODO:\n//HANDLE ERRORS DUE TO PRESSING CHARACTERS LIKE SHIFT ALT CTRL ETC\n\n//EVERY TIME I HIT SPACE AND THE WORD TYPED IS CORRECT THE INPUT FIELD\n//SHOULD CLEAR\n\n//IF THE USER TYPES A WRONG CHARACTER CHARACTER TYPED FOLLOWING IT\n// SHOULD BE RED NOT MATTER WHAT IS TYPED\n//TEXTFIELD SHOULD ALSO BE RED\n\n//DRY RUN EVERYTHING AND INTEGRATE IT WITH AKHIL'S CODE PROPERLY\n\n// ANYTHING ELSE?\n//THAT'S IT FOR NOW I GUESS\n// BRUH THE WORDS ARE WRAPPING. DO WE WANT THIS BEHAVIOUR?\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/pages/Room.tsx",["93","94"],"import React, { ReactElement, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useGame } from \"../../context/GameContext\";\n\nimport { Room as RoomType, Player } from \"../../utils/types\";\n\nexport default function Room({ match }: any): ReactElement {\n  const game = useGame();\n\n  const history = useHistory();\n\n  const players = game?.room?.players;\n\n  useEffect(() => {\n    if (!game?.room?.gameStarted) {\n      return game?.leaveRoom;\n    }\n  }, []);\n\n  game?.onUpdate((room, event) => {\n    if (room.gameStarted) {\n      history.push({\n        pathname: `${match.url}/game`,\n        state: { textString: room.paragraph },\n      });\n    }\n  });\n\n  const handleLeave = () => {\n    game?.leaveRoom();\n    history.push(\"/play\");\n  };\n\n  const handleStart = () => {\n    //DO SOCKET WALA LOGIC\n    // GET A PARAGRAH\n    game?.startGame();\n  };\n\n  return (\n    <div className=\"room\">\n      <h1>\n        Room ID: <span> {game?.room?._id}</span>{\" \"}\n        <LeaveButton handleLeave={handleLeave} />\n      </h1>\n\n      <h2>Players</h2>\n      {players?.map((player: Player) => (\n        <div className=\"player\">\n          {\" \"}\n          <i\n            style={{ color: `${player.color}` }}\n            className=\"fas fa-user\"\n          ></i>{\" \"}\n          {player.user.username} #{player.user.tag}\n        </div>\n      ))}\n\n      <button onClick={handleStart} disabled={players && players.length < 2}>\n        Start\n      </button>\n    </div>\n  );\n}\n\n// FOR OPTIMIZATION\n// IF ITS NOT IN A DIFFERENT COMPONENT\n// WHOLE PAGE IS RE RENDERING ON HOVER\nfunction LeaveButton({\n  handleLeave,\n}: {\n  handleLeave: () => void;\n}): ReactElement {\n  const [doorClass, setDoorClass] = useState(\"fas fa-door-closed\");\n\n  return (\n    <div\n      onClick={handleLeave}\n      onMouseEnter={() => setDoorClass(\"fas fa-door-open\")}\n      onMouseLeave={() => setDoorClass(\"fas fa-door-closed\")}\n      className=\"leave\"\n    >\n      Leave\n      <i className={doorClass}></i>\n    </div>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Header.tsx",["95","96"],"import React, { ReactElement } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nimport logo from \"../../assets/logo.png\";\n\ninterface Props {}\n\nexport default function Header(): ReactElement {\n  return (\n    <React.Fragment>\n      <div className=\"header\">\n        <div className=\"left\">\n          <img src={logo} />\n          <span>TypeRacer</span>\n        </div>\n        <div className=\"right\">\n          <div className=\"player\">\n            <i className=\"fas fa-user\"></i>\n            <span>Guest</span>\n            {/* #1337 */}\n          </div>\n          <Link to=\"/auth\">\n            <button>\n              <i className=\"fas fa-sign-in-alt\"></i>\n              Sign In\n            </button>\n          </Link>\n        </div>\n      </div>\n      <nav className=\"nav\">\n        <NavLink exact to=\"/\" activeClassName=\"link-active\">\n          <i className=\"fas fa-home\"></i>\n          Home\n        </NavLink>\n        <NavLink to=\"/play\" activeClassName=\"link-active\">\n          <i className=\"fas fa-keyboard\"></i>\n          Play\n        </NavLink>\n      </nav>\n    </React.Fragment>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/hooks/useInputState.ts",[],"/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Divify.tsx",["97"],"import React, { ReactElement } from \"react\";\n\nimport { Letter } from \"../../utils/types\";\n\ninterface IProps {\n  textArr: Letter[];\n}\n\nconst Divify: React.FC<IProps> = ({ textArr }: IProps) => {\n  return (\n    <React.Fragment>\n      <div className=\"letter-container\">\n        {textArr.map((letter: Letter) => {\n          return (\n            <span\n              className=\"letter\"\n              style={{\n                backgroundColor:\n                  letter.color === \"green\"\n                    ? \"#7bc74d\"\n                    : letter.color === \"red\"\n                    ? \"#f33535\"\n                    : \"#1D1C20\",\n              }}\n            >\n              {letter.value}{\" \"}\n            </span>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Divify;\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/components/utils/Track.tsx",["98","99"],"import React, { ReactElement } from \"react\";\n\ninterface Props {\n  color: string;\n  currentPercentage: number;\n}\n\nexport default function Track({}): ReactElement {\n  return (\n    <div className=\"track\">\n      <div style={{ color: \"#00fff5\", left: \"10%\" }} className=\"car\">\n        <i className=\"fas fa-car-side\"></i>\n      </div>\n      <div\n        style={{ background: \"#00fff5\", width: \"10%\" }}\n        className=\"completed-line\"\n      ></div>\n    </div>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/trash/typeracer-clone/client/src/hooks/useTimer.ts",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":22,"column":23,"nodeType":"106","messageId":"107","endLine":22,"endColumn":37},{"ruleId":"104","severity":1,"message":"108","line":5,"column":10,"nodeType":"106","messageId":"107","endLine":5,"endColumn":13},{"ruleId":"104","severity":1,"message":"109","line":5,"column":15,"nodeType":"106","messageId":"107","endLine":5,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":16,"column":36,"nodeType":"112","messageId":"113","endLine":16,"endColumn":37,"suggestions":"114"},{"ruleId":"110","severity":1,"message":"111","line":16,"column":61,"nodeType":"112","messageId":"113","endLine":16,"endColumn":62,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"111","line":16,"column":70,"nodeType":"112","messageId":"113","endLine":16,"endColumn":71,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"111","line":16,"column":74,"nodeType":"112","messageId":"113","endLine":16,"endColumn":75,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":20,"column":30,"nodeType":"120","messageId":"121","endLine":20,"endColumn":39},{"ruleId":"104","severity":1,"message":"122","line":187,"column":33,"nodeType":"106","messageId":"107","endLine":187,"endColumn":46},{"ruleId":"104","severity":1,"message":"123","line":1,"column":49,"nodeType":"106","messageId":"107","endLine":1,"endColumn":58},{"ruleId":"118","severity":1,"message":"119","line":8,"column":30,"nodeType":"120","messageId":"121","endLine":8,"endColumn":39},{"ruleId":"124","severity":1,"message":"125","line":21,"column":9,"nodeType":"126","endLine":21,"endColumn":29},{"ruleId":"104","severity":1,"message":"127","line":24,"column":9,"nodeType":"106","messageId":"107","endLine":24,"endColumn":13},{"ruleId":"128","severity":1,"message":"129","line":78,"column":6,"nodeType":"130","endLine":78,"endColumn":19,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":82,"column":19,"nodeType":"134","messageId":"121","endLine":82,"endColumn":21},{"ruleId":"128","severity":1,"message":"135","line":141,"column":6,"nodeType":"130","endLine":141,"endColumn":15,"suggestions":"136"},{"ruleId":"132","severity":1,"message":"133","line":148,"column":40,"nodeType":"134","messageId":"121","endLine":148,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":150,"column":37,"nodeType":"134","messageId":"121","endLine":150,"endColumn":39},{"ruleId":"132","severity":1,"message":"133","line":154,"column":37,"nodeType":"134","messageId":"121","endLine":154,"endColumn":39},{"ruleId":"104","severity":1,"message":"137","line":5,"column":18,"nodeType":"106","messageId":"107","endLine":5,"endColumn":26},{"ruleId":"128","severity":1,"message":"138","line":18,"column":6,"nodeType":"130","endLine":18,"endColumn":8,"suggestions":"139"},{"ruleId":"104","severity":1,"message":"140","line":6,"column":11,"nodeType":"106","messageId":"107","endLine":6,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":13,"column":11,"nodeType":"126","endLine":13,"endColumn":29},{"ruleId":"104","severity":1,"message":"141","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":29},{"ruleId":"104","severity":1,"message":"140","line":3,"column":11,"nodeType":"106","messageId":"107","endLine":3,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":8,"column":31,"nodeType":"120","messageId":"121","endLine":8,"endColumn":33},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'setCurrentUser' is assigned a value but never used.","Identifier","unusedVar","'gql' is defined but never used.","'useQuery' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["144","145"],["146","147"],["148","149"],["150","151"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'resetUsername' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'game' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'wordCount', 'wordStartIndex', and 'wordsArr'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setText' needs the current value of 'wordStartIndex'.","ArrayExpression",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array. If 'start' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["153"],"'RoomType' is defined but never used.","React Hook useEffect has missing dependencies: 'game?.leaveRoom' and 'game?.room?.gameStarted'. Either include them or remove the dependency array.",["154"],"'Props' is defined but never used.","'ReactElement' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"155","fix":"156","desc":"157"},{"messageId":"158","fix":"159","desc":"160"},{"messageId":"155","fix":"161","desc":"157"},{"messageId":"158","fix":"162","desc":"160"},{"messageId":"155","fix":"163","desc":"157"},{"messageId":"158","fix":"164","desc":"160"},{"messageId":"155","fix":"165","desc":"157"},{"messageId":"158","fix":"166","desc":"160"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"removeEscape",{"range":"173","text":"174"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"175","text":"176"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"177","text":"174"},{"range":"178","text":"176"},{"range":"179","text":"174"},{"range":"180","text":"176"},{"range":"181","text":"174"},{"range":"182","text":"176"},"Update the dependencies array to be: [currentWord, wordCount, wordStartIndex, wordsArr]",{"range":"183","text":"184"},"Update the dependencies array to be: [current, start]",{"range":"185","text":"186"},"Update the dependencies array to be: [game?.leaveRoom, game?.room?.gameStarted]",{"range":"187","text":"188"},[354,355],"",[354,354],"\\",[379,380],[379,379],[388,389],[388,388],[392,393],[392,392],[2590,2603],"[currentWord, wordCount, wordStartIndex, wordsArr]",[4110,4119],"[current, start]",[488,490],"[game?.leaveRoom, game?.room?.gameStarted]"]