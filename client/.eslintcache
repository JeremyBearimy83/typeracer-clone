[{"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/index.tsx":"1","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/App.tsx":"2","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/context/AuthContext.tsx":"3","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/Game.tsx":"4","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Auth.tsx":"5","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Home.tsx":"6","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Play.tsx":"7","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/utils/Header.tsx":"8","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/Divify.tsx":"9","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/hooks/useInputState.ts":"10"},{"size":407,"mtime":1609848509678,"results":"11","hashOfConfig":"12"},{"size":695,"mtime":1609848665147,"results":"13","hashOfConfig":"12"},{"size":738,"mtime":1609848607776,"results":"14","hashOfConfig":"12"},{"size":3740,"mtime":1610015715148,"results":"15","hashOfConfig":"12"},{"size":4704,"mtime":1609848574534,"results":"16","hashOfConfig":"12"},{"size":564,"mtime":1609848576174,"results":"17","hashOfConfig":"12"},{"size":389,"mtime":1609848577800,"results":"18","hashOfConfig":"12"},{"size":1098,"mtime":1609848509678,"results":"19","hashOfConfig":"12"},{"size":831,"mtime":1610015625436,"results":"20","hashOfConfig":"12"},{"size":432,"mtime":1609848509678,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1w2lo5m",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/index.tsx",[],["50","51"],"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/App.tsx",[],"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/context/AuthContext.tsx",["52"],"import React, { ReactElement, useContext, useState } from \"react\";\n\ninterface Props {\n  children: ReactElement[] | ReactElement;\n}\n\ntype User = any | null;\n\nconst AuthContext = React.createContext<User>(null);\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport default function AuthProvider({ children }: Props): ReactElement {\n  const [currentUser, setCurrentUser] = useState<User>(null);\n\n  const register = async (email: string, password: string) => {};\n\n  const login = async (email: string, password: string) => {};\n\n  const logout = async () => {};\n\n  const value = {\n    currentUser,\n    register,\n    login,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/Game.tsx",["53","54"],"import React, { ReactElement, useState, useEffect } from \"react\";\n\nimport Divify from \"./Divify\";\n\nimport { Letter } from \"../../types\";\n\nconst textString: string =\n  \"Synthetic emotions in the form of pills, psychological warfare in the form of advertising, mind-altering chemicals in the form of food, brainwashing seminars in the form of media, controlled isolated bubbles in the form of social networks.\";\n\n// const textString: string = \"Please work :)\";\n\n//STORES AN ARRAY OF WORDS\nconst wordsArr: string[] = textString.split(\" \");\n\n//STORES ARRAY OF LETTER OBJECTS\nconst textArr: Letter[] = textString\n  .split(\"\")\n  .map((val) => ({ value: val, color: \"grey\" }));\n\nexport default function Game(): ReactElement {\n  const [text, setText] = useState<Letter[]>(textArr);\n  //THE INDEX I AM  CURRENTLY ON IN THE LETTER ARRAY\n  //const [letterCount, setLetterCount] = useState<number>(1);\n\n  //THE INDEX I AM CURRENTLY ON IN THE WORD ARRAY\n  const [wordCount, setWordCount] = useState<number>(0);\n\n  const [wordStartIndex, setWordStartIndex] = useState<number>(0);\n\n  //CURRENT WORD BEING TYPED IN THE INPUT\n  const [currentWord, setCurrentWord] = useState<any>(\"\");\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"HANDLE IN PUT CHANGE IN CALLED\");\n    setCurrentWord(event.target.value);\n  };\n\n  useEffect(() => {\n    setText((prevText) => {\n      console.log({ prevText });\n      // const n: number = wordStartIndex + wordsArr[wordCount].length;\n      // console.log({ n });\n      const newText = prevText.map((l: Letter, i: number) => {\n        if (i >= wordStartIndex && i < wordStartIndex + currentWord.length) {\n          const subString: string = wordsArr[wordCount].substr(\n            0,\n            i - wordStartIndex + 1\n          );\n          return {\n            ...l,\n            color:\n              subString === currentWord.substr(0, i - wordStartIndex + 1)\n                ? \"green\"\n                : \"red\",\n          };\n        } else if (i >= wordStartIndex) return { ...l, color: \"grey\" };\n        return l;\n      });\n      return newText;\n    });\n  }, [currentWord]);\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    console.log(event.key);\n    if (event.key == \" \") {\n      if (currentWord === wordsArr[wordCount]) {\n        setCurrentWord(\"\");\n        setWordCount(wordCount + 1);\n        setWordStartIndex((prev) => prev + currentWord.length + 1);\n        event.preventDefault();\n      } else return;\n    }\n  };\n\n  useEffect(() => {\n    if (wordStartIndex > 0) {\n      setText((prevText) => {\n        const newText = Object.assign([], prevText, {\n          [wordStartIndex - 1]: {\n            ...prevText[wordStartIndex - 1],\n            color: \"green\",\n          },\n        });\n        return newText;\n      });\n    }\n  }, [wordStartIndex]);\n\n  //console.log({ text });\n  return (\n    <React.Fragment>\n      <Divify textArr={text} />\n      <input\n        style={{ padding: \"20px\" }}\n        type=\"text\"\n        value={currentWord}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n      />\n    </React.Fragment>\n  );\n}\n\n//ACHA SO WHAT'S THE NEW PLAN\n//THE NEW PLAN IS WHEN THE CURRENT WORD CHANGES\n//I SHOULD SET ALL THE CURRENT CHARACTERS TO GREEN OR RED\n\n//FEW ISSUES TO BE RESOLVED RIGHT NOW:\n//TODO:\n//HANDLE ERRORS DUE TO PRESSING CHARACTERS LIKE SHIFT ALT CTRL ETC\n\n//EVERY TIME I HIT SPACE AND THE WORD TYPED IS CORRECT THE INPUT FIELD\n//SHOULD CLEAR\n\n//IF THE USER TYPES A WRONG CHARACTER CHARACTER TYPED FOLLOWING IT\n// SHOULD BE RED NOT MATTER WHAT IS TYPED\n//TEXTFIELD SHOULD ALSO BE RED\n\n//DRY RUN EVERYTHING AND INTEGRATE IT WITH AKHIL'S CODE PROPERLY\n\n// ANYTHING ELSE?\n//THAT'S IT FOR NOW I GUESS\n","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Auth.tsx",["55","56","57","58","59"],"import React, { ReactElement, useState, FormEvent } from \"react\";\n\nimport useInputState from \"../../hooks/useInputState\";\n\ninterface Props {}\n\nconst validateEmail = (email: string) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport default function Auth({}: Props): ReactElement {\n  const [login, setLogin] = useState(true);\n\n  const switchPage = () => {\n    setLogin((prev) => !prev);\n  };\n\n  return (\n    <div className=\"auth\">\n      <main>\n        {login ? (\n          <SignIn switchPage={switchPage} />\n        ) : (\n          <Register switchPage={switchPage} />\n        )}\n      </main>\n    </div>\n  );\n}\n\nfunction SignIn({ switchPage }: { switchPage: () => void }): ReactElement {\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const [email, setEmail, resetEmail] = useInputState();\n  const [pass, setPass, resetPass] = useInputState();\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n    else if (!validateEmail(email)) errors.push(\"Invalid Email ID\");\n    if (!pass) errors.push(\"Password is Required\");\n\n    if (errors.length === 0) {\n    } else {\n      resetEmail();\n      resetPass();\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h1>Sign In</h1>\n      <form onSubmit={handleSubmit}>\n        {errors.map((err) => {\n          return <div className=\"error\">{err}</div>;\n        })}\n        <div className=\"input\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={email}\n            onChange={setEmail}\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Johndoe@gmail.com\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"pass\">Password</label>\n          <input\n            value={pass}\n            onChange={setPass}\n            id=\"pass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n\n        <div className=\"outh outh--google\">\n          <i className=\"fab fa-google\"></i>\n          Continue with Google\n        </div>\n        <div className=\"outh outh--discord\">\n          <i className=\"fab fa-discord\"></i>\n          Continue with Discord\n        </div>\n        <button>Submit</button>\n      </form>\n      <span>\n        Don't have an account? <span onClick={switchPage}>Register</span>{\" \"}\n      </span>\n    </React.Fragment>\n  );\n}\n\nfunction Register({ switchPage }: { switchPage: () => void }): ReactElement {\n  const [errors, setErrors] = useState<string[]>([]);\n\n  const [email, setEmail, resetEmail] = useInputState();\n  const [pass, setPass, resetPass] = useInputState();\n  const [confirmPass, setConfirmPass, resetConfirmPass] = useInputState();\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const errors: string[] = [];\n    if (!email) errors.push(\"Email is Required\");\n    else if (!validateEmail(email)) errors.push(\"Invalid Email ID\");\n    if (!pass) errors.push(\"Password is Required\");\n    else if (pass !== confirmPass) errors.push(\"Passwords do not match\");\n\n    if (errors.length === 0) {\n    } else {\n      resetEmail();\n      resetPass();\n      resetConfirmPass();\n      setErrors(errors);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <h1>Register</h1>\n      <form onSubmit={handleSubmit}>\n        {errors.map((err) => {\n          return <div className=\"error\">{err}</div>;\n        })}\n        <div className=\"input\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            value={email}\n            onChange={setEmail}\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"Johndoe@gmail.com\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"pass\">Password</label>\n          <input\n            value={pass}\n            onChange={setPass}\n            id=\"pass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n        <div className=\"input\">\n          <label htmlFor=\"cpass\">Confirm Password</label>\n          <input\n            value={confirmPass}\n            onChange={setConfirmPass}\n            id=\"cpass\"\n            type=\"password\"\n            placeholder=\"••••••••••\"\n          />\n        </div>\n\n        <button>Submit</button>\n      </form>\n      <span>\n        Already have an account? <span onClick={switchPage}>Sign In</span>{\" \"}\n      </span>\n    </React.Fragment>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Home.tsx",["60","61"],"import React, { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport typing from \"../../assets/typing.png\";\n\ninterface Props {}\n\nexport default function Home({}: Props): ReactElement {\n  return (\n    <div className=\"home\">\n      <aside>\n        <h1>TypeRacer</h1>\n        <p>\n          Take your typing skills to the next level, one keystroke at a time\n        </p>\n        <Link to=\"/play\">\n          <button>Start Typing</button>\n        </Link>\n      </aside>\n      <aside>\n        <img src={typing} />\n      </aside>\n    </div>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/pages/Play.tsx",[],"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/utils/Header.tsx",["62","63"],"import React, { ReactElement } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\nimport logo from \"../../assets/logo.png\";\n\ninterface Props {}\n\nexport default function Header(): ReactElement {\n  return (\n    <React.Fragment>\n      <div className=\"header\">\n        <div className=\"left\">\n          <img src={logo} />\n          <span>TypeRacer</span>\n        </div>\n        <div className=\"right\">\n          <div className=\"player\">\n            <i className=\"fas fa-user\"></i>\n            <span>AKhForty7</span>\n            #1337\n          </div>\n          <Link to=\"/auth\">\n            <button>\n              <i className=\"fas fa-sign-in-alt\"></i>\n              Sign In\n            </button>\n          </Link>\n        </div>\n      </div>\n      <nav className=\"nav\">\n        <NavLink exact to=\"/\" activeClassName=\"link-active\">\n          <i className=\"fas fa-home\"></i>\n          Home\n        </NavLink>\n        <NavLink to=\"/play\" activeClassName=\"link-active\">\n          <i className=\"fas fa-keyboard\"></i>\n          Play\n        </NavLink>\n      </nav>\n    </React.Fragment>\n  );\n}\n","/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/components/Divify.tsx",["64"],"import React, { ReactElement } from \"react\";\n\nimport { Letter } from \"../../types\";\n\ninterface IProps {\n  textArr: Letter[];\n}\n\nconst Divify: React.FC<IProps> = ({ textArr }: IProps) => {\n  console.log(\"Divify is called\");\n  return (\n    <React.Fragment>\n      <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {textArr.map((letter: Letter) => {\n          return (\n            <span\n              style={{\n                backgroundColor:\n                  letter.color === \"green\"\n                    ? \"green\"\n                    : letter.color === \"red\"\n                    ? \"red\"\n                    : \"grey\",\n                padding: \"10px\",\n                margin: \"2px\",\n              }}\n            >\n              {letter.value}{\" \"}\n            </span>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Divify;\n",["65","66"],"/home/ujjwal/the_good_place/web_stuff/typeracer-clone/client/src/hooks/useInputState.ts",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":16,"column":23,"nodeType":"73","messageId":"74","endLine":16,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":61,"column":6,"nodeType":"77","endLine":61,"endColumn":19,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":65,"column":19,"nodeType":"81","messageId":"82","endLine":65,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":8,"column":36,"nodeType":"85","messageId":"86","endLine":8,"endColumn":37,"suggestions":"87"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":61,"nodeType":"85","messageId":"86","endLine":8,"endColumn":62,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":70,"nodeType":"85","messageId":"86","endLine":8,"endColumn":71,"suggestions":"89"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":74,"nodeType":"85","messageId":"86","endLine":8,"endColumn":75,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":12,"column":30,"nodeType":"93","messageId":"82","endLine":12,"endColumn":39},{"ruleId":"91","severity":1,"message":"92","line":8,"column":30,"nodeType":"93","messageId":"82","endLine":8,"endColumn":39},{"ruleId":"94","severity":1,"message":"95","line":21,"column":9,"nodeType":"96","endLine":21,"endColumn":29},{"ruleId":"71","severity":1,"message":"97","line":6,"column":11,"nodeType":"73","messageId":"74","endLine":6,"endColumn":16},{"ruleId":"94","severity":1,"message":"95","line":13,"column":11,"nodeType":"96","endLine":13,"endColumn":29},{"ruleId":"71","severity":1,"message":"98","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":29},{"ruleId":"67","replacedBy":"99"},{"ruleId":"69","replacedBy":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"@typescript-eslint/no-unused-vars","'setCurrentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'wordCount' and 'wordStartIndex'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setText' needs the current value of 'wordStartIndex'.","ArrayExpression",["103"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["104","105"],["106","107"],["108","109"],["110","111"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Props' is defined but never used.","'ReactElement' is defined but never used.",["101"],["102"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"messageId":"114","fix":"115","desc":"116"},{"messageId":"117","fix":"118","desc":"119"},{"messageId":"114","fix":"120","desc":"116"},{"messageId":"117","fix":"121","desc":"119"},{"messageId":"114","fix":"122","desc":"116"},{"messageId":"117","fix":"123","desc":"119"},{"messageId":"114","fix":"124","desc":"116"},{"messageId":"117","fix":"125","desc":"119"},"Update the dependencies array to be: [currentWord, wordCount, wordStartIndex]",{"range":"126","text":"127"},"removeEscape",{"range":"128","text":"129"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"130","text":"131"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"132","text":"129"},{"range":"133","text":"131"},{"range":"134","text":"129"},{"range":"135","text":"131"},{"range":"136","text":"129"},{"range":"137","text":"131"},[2123,2136],"[currentWord, wordCount, wordStartIndex]",[221,222],"",[221,221],"\\",[246,247],[246,246],[255,256],[255,255],[259,260],[259,259]]